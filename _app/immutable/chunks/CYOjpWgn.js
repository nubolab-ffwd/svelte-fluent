const w=/^(\[)?(\.\.\.)?(\w+)(?:=(\w+))?(\])?$/;function v(t){const s=[];return{pattern:t==="/"?/^\/$/:new RegExp(`^${m(t).map(i=>{const o=/^\[\.\.\.(\w+)(?:=(\w+))?\]$/.exec(i);if(o)return s.push({name:o[1],matcher:o[2],optional:!1,rest:!0,chained:!0}),"(?:/([^]*))?";const u=/^\[\[(\w+)(?:=(\w+))?\]\]$/.exec(i);if(u)return s.push({name:u[1],matcher:u[2],optional:!0,rest:!1,chained:!0}),"(?:/([^/]+))?";if(!i)return;const r=i.split(/\[(.+?)\](?!\])/);return"/"+r.map((e,a)=>{if(a%2){if(e.startsWith("x+"))return h(String.fromCharCode(parseInt(e.slice(2),16)));if(e.startsWith("u+"))return h(String.fromCharCode(...e.slice(2).split("-").map(g=>parseInt(g,16))));const c=w.exec(e),[,l,p,_,d]=c;return s.push({name:_,matcher:d,optional:!!l,rest:!!p,chained:p?a===1&&r[0]==="":!1}),p?"([^]*?)":l?"([^/]*)?":"([^/]+?)"}return h(e)}).join("")}).join("")}/?$`),params:s}}function $(t){return t!==""&&!/^\([^)]+\)$/.test(t)}function m(t){return t.slice(1).split("/").filter($)}function j(t,s,f){const i={},o=t.slice(1),u=o.filter(n=>n!==void 0);let r=0;for(let n=0;n<s.length;n+=1){const e=s[n];let a=o[n-r];if(e.chained&&e.rest&&r&&(a=o.slice(n-r,n+1).filter(c=>c).join("/"),r=0),a===void 0){e.rest&&(i[e.name]="");continue}if(!e.matcher||f[e.matcher](a)){i[e.name]=a;const c=s[n+1],l=o[n+1];c&&!c.rest&&c.optional&&l&&e.chained&&(r=0),!c&&!l&&Object.keys(i).length===u.length&&(r=0);continue}if(e.optional&&e.chained){r++;continue}return}if(!r)return i}function h(t){return t.normalize().replace(/[[\]]/g,"\\$&").replace(/%/g,"%25").replace(/\//g,"%2[Ff]").replace(/\?/g,"%3[Ff]").replace(/#/g,"%23").replace(/[.*+?^${}()|\\]/g,"\\$&")}const x=/\[(\[)?(\.\.\.)?(\w+?)(?:=(\w+))?\]\]?/g;function W(t,s){const f=m(t),i=t!="/"&&t.endsWith("/");return"/"+f.map(o=>o.replace(x,(u,r,n,e)=>{const a=s[e];if(!a){if(r||n&&a!==void 0)return"";throw new Error(`Missing parameter '${e}' in route ${t}`)}if(a.startsWith("/")||a.endsWith("/"))throw new Error(`Parameter '${e}' in route ${t} cannot start or end with a slash -- this would cause an invalid route like foo//bar`);return a})).filter(Boolean).join("/")+(i?"/":"")}export{j as e,v as p,W as r};
